01 Function Name:
ft_atoi


02 Difficulty Level:
Medium


03 Function Purpose:
Converts the initial portion of a string into its corresponding integer value.


04 Function Analogy:
Like reading a house number from a street sign: you skip the blank space, maybe see a minus sign, then read the digits until the number stops.


05 Function Prototype


int        ft_atoi(const char *str);


06 Parameters:


Name: str        
Type: const char *        
Purpose: Pointer to the string to be converted into an integer.
                


07 Return Value:
Returns the integer value represented by the numeric characters in the string. If a - sign is detected, the result is negative. Ignores non-numeric characters after the number. If the string doesn’t contain digits, returns 0.


08 Function Code:


int        ft_atoi(const char *str)
{
        int        result;
        int        sign;


        result = 0;
        sign = 1;


        // Skip whitespace characters (space, tab, newline, etc.)
        while (*str == ' ' || (*str >= 9 && *str <= 13))
                str++;


        // Handle optional '+' or '-' sign
        if (*str == '-' || *str == '+')
        {
                if (*str == '-')
                        sign = -1;
                str++;
        }


        // Convert digits to integer
        while (*str >= '0' && *str <= '9')
        {
                result = result * 10 + (*str - '0');
                str++;
        }


        return (result * sign);
}

09 Function Use Cases: 


int x = ft_atoi("42");        // x == 42
int y = ft_atoi("   -123");   // y == -123
int z = ft_atoi("007");       // z == 7
int a = ft_atoi("123abc");    // a == 123
int b = ft_atoi("abc123");    // b == 0
10 Test Main




#include <stdio.h>


int        ft_atoi(const char *str);


int main(void)
{
        printf("Test 1: %d\n", ft_atoi("42"));           // 42
        printf("Test 2: %d\n", ft_atoi("   -123"));      // -123
        printf("Test 3: %d\n", ft_atoi("+56"));          // 56
        printf("Test 4: %d\n", ft_atoi("  0042abc"));    // 42
        printf("Test 5: %d\n", ft_atoi("abc123"));       // 0
        printf("Test 6: %d\n", ft_atoi("   + 12"));      // 0
        return (0);
}


11 Gotchas
- Only the first valid number is parsed; anything after is ignored.
- Whitespace includes tabs, newlines (\n), carriage returns (\r), etc.
- Multiple signs like "--42" or "+-42" are invalid and return 0.
- Overflow is not handled
- Leading characters like "abc42" will return 0, not an error.


12 Implementation Tips: 
- Use while (*str == ' ' || (*str >= 9 && *str <= 13)) to skip all ASCII whitespace characters.


- Watch out for the indentation of str++ in the if (*str == '-') block — it must always execute when a sign is found.


- Remember *str - '0' converts a char digit to its integer value.


13 Reusability in Other Libft Functions: 


Could be reused or referenced in bonus functions like ft_strtol or to validate number inputs before allocation


14 Main Concepts Involved: 

- Pointer iteration (while (*str))
- ASCII value manipulation
- Handling edge cases (signs, whitespaces)
- Input parsing


15 Software Engineering Tips: 


- Always test with both valid and invalid inputs
- Maintain consistent formatting and clear indentation for readability
- Add bounds checking (e.g., integer overflow) if extending this function
- Avoid side effects: ft_atoi does not modify the input string, which is good practice